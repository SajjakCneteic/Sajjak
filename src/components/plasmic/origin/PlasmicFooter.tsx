// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oDn7wdWyHsZpqBYxQPecYY
// Component: oSRdnf36ND0v

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: I5js4PhjVC86/component
import Button from "../../Button"; // plasmic-import: KyOtxkGq5z0v/component

import { useScreenVariants as useScreenVariantsjLoFvAoj5APq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JLoFvAOJ5aPq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oDn7wdWyHsZpqBYxQPecYY/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: oSRdnf36ND0v/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: r-0xa9xlFQHA/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: vgnGHPdtvCPx/icon
import AngleRightsvgIcon from "./icons/PlasmicIcon__AngleRightsvg"; // plasmic-import: HCLMFHaTu_j6/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 30-RNx0w20PV/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Bl1NPcyvgth9/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: iDBqeLy3gvxe/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: dpmZiU3Eo7tI/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: Flex__<"div">;
  _2?: Flex__<"a">;
  textInput2?: Flex__<typeof TextInput>;
  httpsstudioplasmicapp?: Flex__<"a">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjLoFvAoj5APq()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__me0Hu)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__u78Vv)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__q2Vo7)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sOv4
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Contact us\n"
                : "Contact us\n"}
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__yevSl
              )}
              platform={"react"}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "(555) 555-5555"
                : "(555) 555-5555"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__vTkpo
              )}
              platform={"react"}
            >
              {"support@example.com"}
            </PlasmicLink__>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__l5MyS)}
        >
          <PlasmicLink__
            data-plasmic-name={"_2"}
            data-plasmic-override={overrides._2}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty._2
            )}
            href={
              hasVariant(globalVariants, "screen", "mobileOnly") ? "#" : `/shop`
            }
            platform={"react"}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Shop"
              : "Shop"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__aijku
            )}
            href={`/academy`}
            platform={"react"}
          >
            {"The Academy"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__u2YZ
            )}
            href={`/about`}
            platform={"react"}
          >
            {"About"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__ubRpM
            )}
            href={`/help`}
            platform={"react"}
          >
            {"Help"}
          </PlasmicLink__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6KKz)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wcTrF
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Email newsletter"
              : "Email newsletter"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__kcs36)}>
            <TextInput
              data-plasmic-name={"textInput2"}
              data-plasmic-override={overrides.textInput2}
              className={classNames("__wab_instance", sty.textInput2)}
              endIcon={
                <Button
                  className={classNames("__wab_instance", sty.button__lHgZe)}
                  submitsForm={true}
                >
                  <AngleRightsvgIcon
                    className={classNames(projectcss.all, sty.svg__ss03Q)}
                    role={"img"}
                  />
                </Button>
              }
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["textInput2", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "E-mail"
                  : "E-mail"
              }
              showEndIcon={
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              }
              value={
                generateStateValueProp($state, ["textInput2", "value"]) ?? ""
              }
            />
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rVBxo)}
        >
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___0CxHe
            )}
            platform={"react"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___6NTvn)}
                role={"img"}
              />
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6Mmv3)}
            >
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon3Icon
                    : Icon3Icon
                }
                className={classNames(projectcss.all, sty.svg__bO4V3)}
                role={"img"}
              />

              <Icon2Icon
                className={classNames(projectcss.all, sty.svg__vsDFm)}
                role={"img"}
              />

              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon28Icon
                    : Icon28Icon
                }
                className={classNames(projectcss.all, sty.svg__o1LWn)}
                role={"img"}
              />
            </Stack__>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___7DHB)}
                role={"img"}
              />
            ) : null}
          </Stack__>
        </Stack__>
        {false ? (
          <div className={classNames(projectcss.all, sty.freeBox___8Cr5R)}>
            <button
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.button__jd80U
              )}
            >
              {"Sign up"}
            </button>
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__hPyoa
              )}
              platform={"react"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__eNhej)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hcUoZ
                )}
              >
                {"Log in"}
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__k3REk)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
          </div>
        ) : null}
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__n9Efh)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jyjEr)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___07Yvt)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jHwQo)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__utpIr
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "(c) Company. All rights reserved. This site proudly built with"
                  : "\u00a9 Company. All rights reserved. This site proudly built with"}
              </div>
              <PlasmicLink__
                data-plasmic-name={"httpsstudioplasmicapp"}
                data-plasmic-override={overrides.httpsstudioplasmicapp}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.httpsstudioplasmicapp
                )}
                platform={"react"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? " Plasmic"
                  : " Plasmic"}
              </PlasmicLink__>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sIalc)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hZXn)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sf0JX)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aQxKv)}
                >
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__tDvFb
                    )}
                    href={`/shipping`}
                    platform={"react"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__tmLi2)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___29E8I
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "shop"
                        : "Shipping & Returns"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__qPx3I)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__lJilQ
                    )}
                    href={`/privacypolicy`}
                    platform={"react"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__g4EZ)}
                        role={"img"}
                      />
                    ) : null}
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__hWPp6)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uGm9W
                      )}
                    >
                      {"Privacy policy"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__fPjce
                    )}
                    href={`/terms`}
                    platform={"react"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__uh8Y6)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6DmeI
                      )}
                    >
                      {"Terms & Conditions"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__tKv1W)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
        </Stack__>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "_2", "textInput2", "httpsstudioplasmicapp"],
  _2: ["_2"],
  textInput2: ["textInput2"],
  httpsstudioplasmicapp: ["httpsstudioplasmicapp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  _2: "a";
  textInput2: typeof TextInput;
  httpsstudioplasmicapp: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _2: makeNodeComponent("_2"),
    textInput2: makeNodeComponent("textInput2"),
    httpsstudioplasmicapp: makeNodeComponent("httpsstudioplasmicapp"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
