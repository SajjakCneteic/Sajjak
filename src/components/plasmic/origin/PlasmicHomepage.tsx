// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oDn7wdWyHsZpqBYxQPecYY
// Component: w8gQlv1tm0rM

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import HeaderTopSection from "../../HeaderTopSection"; // plasmic-import: YM2IWb6-7x__/component
import Navigation from "../../Navigation"; // plasmic-import: XYZYhKQKa5rH/component
import Button from "../../Button"; // plasmic-import: KyOtxkGq5z0v/component
import Icon from "../../Icon"; // plasmic-import: ppX7-dDbM1AF/component
import CofeeProducts from "../../CofeeProducts"; // plasmic-import: 7YeltuFvOqEM/component
import TextInput from "../../TextInput"; // plasmic-import: I5js4PhjVC86/component
import Testmonial from "../../Testmonial"; // plasmic-import: Ua0JAOuc2lTX/component
import Accordion from "../../Accordion"; // plasmic-import: V38XNak8TkBI/component
import Footer from "../../Footer"; // plasmic-import: oSRdnf36ND0v/component

import { useScreenVariants as useScreenVariantsjLoFvAoj5APq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JLoFvAOJ5aPq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oDn7wdWyHsZpqBYxQPecYY/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: w8gQlv1tm0rM/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: vgnGHPdtvCPx/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: N4JVTAtxCskV/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: JogYduvbeOiW/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: _f--HFby5mVf/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: UsR0ZBHjkauF/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: r-0xa9xlFQHA/icon
import AngleRightsvgIcon from "./icons/PlasmicIcon__AngleRightsvg"; // plasmic-import: HCLMFHaTu_j6/icon
import ArrowLeftSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ArrowLeftSvgrepoCom1Svg"; // plasmic-import: YDbptbvHk5HT/icon
import ArrowRightSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ArrowRightSvgrepoCom1Svg"; // plasmic-import: CWlHCO3Mr0t0/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 30-RNx0w20PV/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Bl1NPcyvgth9/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: iDBqeLy3gvxe/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: dpmZiU3Eo7tI/icon
import battlecreekCoffeeRoastersY2CKex0Gv5UUnsplashjpg6XNycPmoS7MA from "./images/battlecreekCoffeeRoastersY2CKex0Gv5UUnsplashjpg.jpg"; // plasmic-import: 6xNycPmoS7mA/picture
import mikeKenneallyZlwDJoKTuA8UnsplashjpgH0Fav2ZrKw from "./images/mikeKenneallyZlwDJoKTuA8Unsplashjpg.jpg"; // plasmic-import: H0FAV_2ZRKw-/picture
import mikeKenneallyTNaLoIZhqVmUnsplash1JpgYqqmt2KRjDd from "./images/mikeKenneallyTNaLoIZhqVmUnsplash1Jpg.jpg"; // plasmic-import: Yqqmt2kRJDd_/picture

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  children5?: React.ReactNode;
  children4?: React.ReactNode;
  children?: React.ReactNode;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "children5",
  "children4",
  "children",
  "children2"
);

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  headerTopSection?: Flex__<typeof HeaderTopSection>;
  navigation?: Flex__<typeof Navigation>;
  foreground2?: Flex__<"div">;
  h1?: Flex__<"h1">;
  ul?: Flex__<"ul">;
  cofeeProducts?: Flex__<typeof CofeeProducts>;
  textInput?: Flex__<typeof TextInput>;
  testmonial?: Flex__<typeof Testmonial>;
  accordion?: Flex__<typeof Accordion>;
  footer?: Flex__<typeof Footer>;
  _?: Flex__<"a">;
  textInput3?: Flex__<typeof TextInput>;
};

export interface DefaultHomepageProps {
  children5?: React.ReactNode;
  children4?: React.ReactNode;
  children?: React.ReactNode;
  children2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjLoFvAoj5APq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <HeaderTopSection
            data-plasmic-name={"headerTopSection"}
            data-plasmic-override={overrides.headerTopSection}
            className={classNames("__wab_instance", sty.headerTopSection)}
          />

          <Navigation
            data-plasmic-name={"navigation"}
            data-plasmic-override={overrides.navigation}
            className={classNames("__wab_instance", sty.navigation)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__lpY1Q)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__x8Mow)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Perfection is not enough"}
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fm55T
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. "
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button___4No5P)}
                  color={"softSand"}
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kv4R4
                    )}
                  >
                    {"Read More"}
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wwJbt)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___5ILuL)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pam1G
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"NOTE"}
                  </span>
                  <React.Fragment>
                    {
                      ": This Origin template is an ~80% subset of the full Origin template from Swell. It is meant to demo how you can use the Plasmic Swell components to build out the parts of a storefront that your content and design teams might want to iterate on heavily. It excludes parts that are typically hard-coded and unchanging, such as the cart UX.\n\nIn particular, the missing things are:\n\n"
                    }
                  </React.Fragment>
                  {
                    <ul
                      data-plasmic-name={"ul"}
                      data-plasmic-override={overrides.ul}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul
                      )}
                    >
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___7S9Dv
                        )}
                      >
                        {
                          "Nav menu UX: this is more of the same (just displaying product catalog data)."
                        }
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__oVEuK
                        )}
                      >
                        {
                          "Cart sidebar UX and email signup: these are typically hard-coded rather than iterated on frequently by the marketing or design teams."
                        }
                      </li>
                    </ul>
                  }
                  <React.Fragment>
                    {
                      "\nIn general, you can use this together with the full Origin codebase from Swell if you want the other functional parts. Plasmic is meant to integrate tightly with codebases and make content/design iteration easier."
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fTnO)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__liqJc)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__n2NjQ)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___3BLQz
                    )}
                  >
                    {"100% Arabica and beyond"}
                  </h2>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__n5Kj)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__iiDv0)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__cSofh)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__krorn
                        )}
                      >
                        {"Direct sourcing"}
                      </div>
                    }
                  >
                    <Icon5Icon
                      className={classNames(projectcss.all, sty.svg__ypYfP)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eCo3)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__hTeJa)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gnm7Y
                        )}
                      >
                        {"Organic farming practices"}
                      </div>
                    }
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__ujUZm)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tGwzs)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__bhWwS)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gycN0
                        )}
                      >
                        {"Biodegradable packaging"}
                      </div>
                    }
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg___8UHkl)}
                      role={"img"}
                    />
                  </Icon>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___68Giw)}
                >
                  <Icon
                    className={classNames("__wab_instance", sty.icon__xjLsU)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gwzig
                        )}
                      >
                        {"Enjoyment guarantee"}
                      </div>
                    }
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__ckkt)}
                      role={"img"}
                    />
                  </Icon>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0BRc)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xIgZt)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zuOdc)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__oo5Kp)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__f4A1I
                    )}
                  >
                    {"Fresh Origin"}
                  </h2>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6XJgf
                  )}
                >
                  {
                    "What's better than having our amazing coffee at home? Getting it delivered so you never run out."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button___2JoSm)}
                  color={"softSand"}
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x9OS
                    )}
                  >
                    {"Read More"}
                  </div>
                </Button>
              </Stack__>
            </Stack__>
          </Stack__>
          <CofeeProducts
            data-plasmic-name={"cofeeProducts"}
            data-plasmic-override={overrides.cofeeProducts}
            className={classNames("__wab_instance", sty.cofeeProducts)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fIlKi)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iGy1U)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vDrxk)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___5BXoK)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__xGCba
                    )}
                  >
                    {"Transparency and sustainability from \nbean to bag"}
                  </h2>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__w9FaY)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__kpZss)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"75%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: battlecreekCoffeeRoastersY2CKex0Gv5UUnsplashjpg6XNycPmoS7MA,
                    fullWidth: 1920,
                    fullHeight: 1280,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__koua1)}>
            <div className={classNames(projectcss.all, sty.freeBox__vVQt)}>
              <div className={classNames(projectcss.all, sty.columns___8IbX8)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__pb41A)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__tnU3B
                    )}
                  >
                    {"Brewing guides"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rGem5
                    )}
                  >
                    {
                      "You don't need a chemistry degree to make great coffee at home. We've done the lab work, so all you have to do is follow our step-by-step instructions."
                    }
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__h4GS
                    )}
                    href={`/about`}
                    platform={"react"}
                  >
                    {"Brew with confidence"}
                  </PlasmicLink__>
                </Stack__>
                <div className={classNames(projectcss.all, sty.column__mnx4U)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ccjRd)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: mikeKenneallyZlwDJoKTuA8UnsplashjpgH0Fav2ZrKw,
                      fullWidth: 1920,
                      fullHeight: 1282,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__lLLf8)}>
            <div className={classNames(projectcss.all, sty.freeBox___8OgzO)}>
              <div className={classNames(projectcss.all, sty.columns__wQsB3)}>
                <div className={classNames(projectcss.all, sty.column__oLifU)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__fDtei)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: mikeKenneallyTNaLoIZhqVmUnsplash1JpgYqqmt2KRjDd,
                      fullWidth: 1920,
                      fullHeight: 1260,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__oUtGs)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__xp5Iv
                    )}
                  >
                    {"Latte art classes"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ex6Ae
                    )}
                  >
                    {
                      "No, we aren't kidding. Spend the morning with a master barista learning how to pour a grammable rosetta in our well-lit and aesthetically pleasing Alexandria roastery."
                    }
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__t7QYd
                    )}
                    href={`/about`}
                    platform={"react"}
                  >
                    {"View class details"}
                  </PlasmicLink__>
                </Stack__>
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gx8Tz)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rcBjp)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7Oshp)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7APeW)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wwTuo
                    )}
                  >
                    {
                      "\u201cWe're never drinking supermarket coffee pods again\u201d"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r9Jxm
                    )}
                  >
                    {"\u2014 Bustle"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vTvtg)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nxJAo
                    )}
                  >
                    {
                      "\u201cOur publishing rate has increased 34% since getting an office subscription\u201d"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cz0H1
                    )}
                  >
                    {"\u2014 Refinery29"}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iEtFt)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dYuS
                    )}
                  >
                    {
                      "\u201cThis story is available to BI Prime subscribers only\u201d"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p9QU2
                    )}
                  >
                    {"\u2014 Business Insider "}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oEbCg)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ohLfy
                    )}
                  >
                    {
                      "\u201cOrigin is disrupting the specialty coffee world in a big way\u201d"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s7Uk9
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"\u2014 Fast Company"}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__vRrUx)}>
            <div className={classNames(projectcss.all, sty.freeBox__s9Myh)}>
              <div className={classNames(projectcss.all, sty.columns__d5QZc)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column___5NPmf)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___5Sxun
                    )}
                  >
                    {"Caffeinate your inbox"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w751R
                    )}
                  >
                    {
                      "If we could send you coffee via email we would. Until then, it's the most legit coffee-related stuff, every week or two."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__g19Gq)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      endIcon={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__um9Z7
                          )}
                          submitsForm={true}
                        >
                          <AngleRightsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hyHcs
                            )}
                            role={"img"}
                          />
                        </Button>
                      }
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={"E-mail"}
                      showEndIcon={true}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <div className={classNames(projectcss.all, sty.column___5MOjw)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ceTW)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: mikeKenneallyZlwDJoKTuA8UnsplashjpgH0Fav2ZrKw,
                      fullWidth: 1920,
                      fullHeight: 1282,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__oIfEx)}>
            <div className={classNames(projectcss.all, sty.freeBox__hLiZ2)}>
              <div className={classNames(projectcss.all, sty.freeBox__qk2OB)}>
                <div className={classNames(projectcss.all, sty.freeBox__qDjBy)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__lqivq
                    )}
                  >
                    {"Their words, not ours"}
                  </h2>
                </div>
                <Testmonial
                  data-plasmic-name={"testmonial"}
                  data-plasmic-override={overrides.testmonial}
                  children2={renderPlasmicSlot({
                    defaultContents: (
                      <ArrowRightSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg___0IxH)}
                        role={"img"}
                      />
                    ),

                    value: args.children2
                  })}
                  className={classNames("__wab_instance", sty.testmonial)}
                >
                  {renderPlasmicSlot({
                    defaultContents: (
                      <ArrowLeftSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__dRrPl)}
                        role={"img"}
                      />
                    ),

                    value: args.children
                  })}
                </Testmonial>
                <Accordion
                  data-plasmic-name={"accordion"}
                  data-plasmic-override={overrides.accordion}
                  children4={renderPlasmicSlot({
                    defaultContents: (
                      <ArrowRightSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__fnb0C)}
                        role={"img"}
                      />
                    ),

                    value: args.children4
                  })}
                  children5={renderPlasmicSlot({
                    defaultContents: (
                      <ArrowRightSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__sif5)}
                        role={"img"}
                      />
                    ),

                    value: args.children5
                  })}
                  className={classNames("__wab_instance", sty.accordion)}
                />
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7JzQj)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__y7JOn)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xyJLy)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rmjYv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t26E
                    )}
                  >
                    {"Contact us\n"}
                  </div>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__iTwOm
                    )}
                    platform={"react"}
                  >
                    {"(555) 555-5555"}
                  </PlasmicLink__>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__yEOm2
                    )}
                    platform={"react"}
                  >
                    {"support@example.com"}
                  </PlasmicLink__>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pOeLv)}
              >
                <PlasmicLink__
                  data-plasmic-name={"_"}
                  data-plasmic-override={overrides._}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty._
                  )}
                  href={"#"}
                  platform={"react"}
                >
                  {"Shop"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__aEcr6
                  )}
                  platform={"react"}
                >
                  {"The Academy"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__qHmlM
                  )}
                  platform={"react"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vezKc
                  )}
                  platform={"react"}
                >
                  {"Help"}
                </PlasmicLink__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wi6Jo)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l6Ul3
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Email newsletter"
                    : "Email newsletter"}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__priTc)}>
                  <TextInput
                    data-plasmic-name={"textInput3"}
                    data-plasmic-override={overrides.textInput3}
                    className={classNames("__wab_instance", sty.textInput3)}
                    endIcon={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__xU2Pb
                        )}
                        submitsForm={true}
                      >
                        <AngleRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__wp4Oh)}
                          role={"img"}
                        />
                      </Button>
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "textInput3",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"E-mail"}
                    showEndIcon={true}
                    value={
                      generateStateValueProp($state, ["textInput3", "value"]) ??
                      ""
                    }
                  />
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4IueM)}
              >
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mqKmC
                  )}
                  platform={"react"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__daVLd)}
                      role={"img"}
                    />
                  ) : null}
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tmNc)}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg___4PiaO)}
                      role={"img"}
                    />

                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__hEzh)}
                      role={"img"}
                    />

                    <Icon28Icon
                      className={classNames(projectcss.all, sty.svg__bmyLx)}
                      role={"img"}
                    />
                  </Stack__>
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__waLkb)}
                      role={"img"}
                    />
                  ) : null}
                </Stack__>
              </Stack__>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__t3Bhz)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__x6SwT
                    )}
                  >
                    {"Sign up"}
                  </button>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__sRdye
                    )}
                    platform={"react"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__kfp77)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___001Ia
                      )}
                    >
                      {"Log in"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__ctMe)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                </div>
              ) : null}
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__o7DmU)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qa9Ok)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mnwBx)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jvY9T)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wq3II
                      )}
                    >
                      {
                        "(c) Company. All rights reserved. This site proudly built with"
                      }
                    </div>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__zuB8U
                      )}
                      platform={"react"}
                    >
                      {" Plasmic"}
                    </PlasmicLink__>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xOIxO)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__m9Ua4)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__eeUpQ)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xVKaB
                        )}
                      >
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__hvfMc
                          )}
                          platform={"react"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kNNbn
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__eZa2S
                            )}
                            href={`/shop`}
                            platform={"react"}
                          >
                            {"shop"}
                          </PlasmicLink__>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__z2JcP
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__obTve
                          )}
                          platform={"react"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kBbpJ
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__gC2Vx
                            )}
                            href={`/academy`}
                            platform={"react"}
                          >
                            {"The Academy"}
                          </PlasmicLink__>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ztpJc
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__dvAes
                          )}
                          platform={"react"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0LlSq
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              sty.link__sIdc
                            )}
                            href={`/about`}
                            platform={"react"}
                          >
                            {"About"}
                          </PlasmicLink__>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__j6Tr
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
          </Stack__>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerTopSection",
    "navigation",
    "foreground2",
    "h1",
    "ul",
    "cofeeProducts",
    "textInput",
    "testmonial",
    "accordion",
    "footer",
    "_",
    "textInput3"
  ],
  headerTopSection: ["headerTopSection"],
  navigation: ["navigation"],
  foreground2: ["foreground2", "h1"],
  h1: ["h1"],
  ul: ["ul"],
  cofeeProducts: ["cofeeProducts"],
  textInput: ["textInput"],
  testmonial: ["testmonial"],
  accordion: ["accordion"],
  footer: ["footer"],
  _: ["_"],
  textInput3: ["textInput3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerTopSection: typeof HeaderTopSection;
  navigation: typeof Navigation;
  foreground2: "div";
  h1: "h1";
  ul: "ul";
  cofeeProducts: typeof CofeeProducts;
  textInput: typeof TextInput;
  testmonial: typeof Testmonial;
  accordion: typeof Accordion;
  footer: typeof Footer;
  _: "a";
  textInput3: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerTopSection: makeNodeComponent("headerTopSection"),
    navigation: makeNodeComponent("navigation"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    ul: makeNodeComponent("ul"),
    cofeeProducts: makeNodeComponent("cofeeProducts"),
    textInput: makeNodeComponent("textInput"),
    testmonial: makeNodeComponent("testmonial"),
    accordion: makeNodeComponent("accordion"),
    footer: makeNodeComponent("footer"),
    _: makeNodeComponent("_"),
    textInput3: makeNodeComponent("textInput3"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
