// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oDn7wdWyHsZpqBYxQPecYY
// Component: YM2IWb6-7x__

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsjLoFvAoj5APq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: JLoFvAOJ5aPq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oDn7wdWyHsZpqBYxQPecYY/projectcss
import sty from "./PlasmicHeaderTopSection.module.css"; // plasmic-import: YM2IWb6-7x__/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 30-RNx0w20PV/icon

createPlasmicElementProxy;

export type PlasmicHeaderTopSection__VariantMembers = {};
export type PlasmicHeaderTopSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderTopSection__VariantsArgs;
export const PlasmicHeaderTopSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHeaderTopSection__ArgsType = {};
type ArgPropType = keyof PlasmicHeaderTopSection__ArgsType;
export const PlasmicHeaderTopSection__ArgProps = new Array<ArgPropType>();

export type PlasmicHeaderTopSection__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<"button">;
  link?: Flex__<"a">;
};

export interface DefaultHeaderTopSectionProps {
  className?: string;
}

const $$ = {};

function PlasmicHeaderTopSection__RenderFunc(props: {
  variants: PlasmicHeaderTopSection__VariantsArgs;
  args: PlasmicHeaderTopSection__ArgsType;
  overrides: PlasmicHeaderTopSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjLoFvAoj5APq()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___02Oaz)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yPe7)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jtaGv
            )}
          >
            {"Get 55% off Lorem Ipsum enough lorem discount"}
          </div>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__q5OVl)}>
          <button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames(
              projectcss.all,
              projectcss.button,
              projectcss.__wab_text,
              sty.button
            )}
          >
            {"Sign up"}
          </button>
          <Stack__
            as={PlasmicLink__}
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            platform={"react"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___0Jygi)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wZu3
              )}
            >
              {"Log in"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___4MuDk)}
                role={"img"}
              />
            ) : null}
          </Stack__>
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "link"],
  button: ["button"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: "button";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderTopSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderTopSection__VariantsArgs;
    args?: PlasmicHeaderTopSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderTopSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeaderTopSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderTopSection__ArgProps,
          internalVariantPropNames: PlasmicHeaderTopSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderTopSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderTopSection";
  } else {
    func.displayName = `PlasmicHeaderTopSection.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderTopSection = Object.assign(
  // Top-level PlasmicHeaderTopSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHeaderTopSection
    internalVariantProps: PlasmicHeaderTopSection__VariantProps,
    internalArgProps: PlasmicHeaderTopSection__ArgProps
  }
);

export default PlasmicHeaderTopSection;
/* prettier-ignore-end */
