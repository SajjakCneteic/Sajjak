// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oDn7wdWyHsZpqBYxQPecYY
// Component: 7YeltuFvOqEM

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CategoryCollection } from "@plasmicpkgs/commerce";
import { CategoryField } from "@plasmicpkgs/commerce";
import { ProductCollection } from "@plasmicpkgs/commerce";
import Product from "../../Product"; // plasmic-import: qDMzNhCj4r2d/component
import { ProductMedia } from "@plasmicpkgs/commerce";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oDn7wdWyHsZpqBYxQPecYY/projectcss
import sty from "./PlasmicCofeeProducts.module.css"; // plasmic-import: 7YeltuFvOqEM/css

createPlasmicElementProxy;

export type PlasmicCofeeProducts__VariantMembers = {};
export type PlasmicCofeeProducts__VariantsArgs = {};
type VariantPropType = keyof PlasmicCofeeProducts__VariantsArgs;
export const PlasmicCofeeProducts__VariantProps = new Array<VariantPropType>();

export type PlasmicCofeeProducts__ArgsType = {};
type ArgPropType = keyof PlasmicCofeeProducts__ArgsType;
export const PlasmicCofeeProducts__ArgProps = new Array<ArgPropType>();

export type PlasmicCofeeProducts__OverridesType = {
  root?: Flex__<"div">;
  categoryCollection?: Flex__<typeof CategoryCollection>;
  freeBox?: Flex__<"div">;
  h2?: Flex__<"h2">;
  categoryField?: Flex__<typeof CategoryField>;
  productCollection?: Flex__<typeof ProductCollection>;
  link?: Flex__<"a">;
  product?: Flex__<typeof Product>;
};

export interface DefaultCofeeProductsProps {
  className?: string;
}

const $$ = {};

function PlasmicCofeeProducts__RenderFunc(props: {
  variants: PlasmicCofeeProducts__VariantsArgs;
  args: PlasmicCofeeProducts__ArgsType;
  overrides: PlasmicCofeeProducts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <CategoryCollection
        data-plasmic-name={"categoryCollection"}
        data-plasmic-override={overrides.categoryCollection}
        category={"5e1f3e10e3f20f3c0043d0a2"}
        className={classNames("__wab_instance", sty.categoryCollection)}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hChL5
                )}
              >
                {"No collection found!"}
              </div>
            )}
          </DataCtxReader__>
        }
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8thXN
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
      >
        <DataCtxReader__>
          {$ctx => (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(projectcss.all, projectcss.h2, sty.h2)}
              >
                <CategoryField
                  data-plasmic-name={"categoryField"}
                  data-plasmic-override={overrides.categoryField}
                  className={classNames("__wab_instance", sty.categoryField)}
                  field={"name"}
                />
              </h2>
              <ProductCollection
                data-plasmic-name={"productCollection"}
                data-plasmic-override={overrides.productCollection}
                className={classNames("__wab_instance", sty.productCollection)}
                count={3}
                emptyMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8V0Cm
                        )}
                      >
                        {"No product found!"}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                includeSubCategories={true}
                loadingMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wt5Gn
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
              >
                <DataCtxReader__>
                  {$ctx => (
                    <PlasmicLink__
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link
                      )}
                      href={`/product/${(() => {
                        try {
                          return $ctx.currentProduct.slug;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return ``;
                          }
                          throw e;
                        }
                      })()}`}
                      platform={"react"}
                    >
                      <Product
                        data-plasmic-name={"product"}
                        data-plasmic-override={overrides.product}
                        className={classNames("__wab_instance", sty.product)}
                      />
                    </PlasmicLink__>
                  )}
                </DataCtxReader__>
              </ProductCollection>
            </div>
          )}
        </DataCtxReader__>
      </CategoryCollection>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "categoryCollection",
    "freeBox",
    "h2",
    "categoryField",
    "productCollection",
    "link",
    "product"
  ],
  categoryCollection: [
    "categoryCollection",
    "freeBox",
    "h2",
    "categoryField",
    "productCollection",
    "link",
    "product"
  ],
  freeBox: [
    "freeBox",
    "h2",
    "categoryField",
    "productCollection",
    "link",
    "product"
  ],
  h2: ["h2", "categoryField"],
  categoryField: ["categoryField"],
  productCollection: ["productCollection", "link", "product"],
  link: ["link", "product"],
  product: ["product"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  categoryCollection: typeof CategoryCollection;
  freeBox: "div";
  h2: "h2";
  categoryField: typeof CategoryField;
  productCollection: typeof ProductCollection;
  link: "a";
  product: typeof Product;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCofeeProducts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCofeeProducts__VariantsArgs;
    args?: PlasmicCofeeProducts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCofeeProducts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCofeeProducts__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCofeeProducts__ArgProps,
          internalVariantPropNames: PlasmicCofeeProducts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCofeeProducts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCofeeProducts";
  } else {
    func.displayName = `PlasmicCofeeProducts.${nodeName}`;
  }
  return func;
}

export const PlasmicCofeeProducts = Object.assign(
  // Top-level PlasmicCofeeProducts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    categoryCollection: makeNodeComponent("categoryCollection"),
    freeBox: makeNodeComponent("freeBox"),
    h2: makeNodeComponent("h2"),
    categoryField: makeNodeComponent("categoryField"),
    productCollection: makeNodeComponent("productCollection"),
    link: makeNodeComponent("link"),
    product: makeNodeComponent("product"),

    // Metadata about props expected for PlasmicCofeeProducts
    internalVariantProps: PlasmicCofeeProducts__VariantProps,
    internalArgProps: PlasmicCofeeProducts__ArgProps
  }
);

export default PlasmicCofeeProducts;
/* prettier-ignore-end */
