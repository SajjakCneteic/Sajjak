// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oDn7wdWyHsZpqBYxQPecYY
// Component: V38XNak8TkBI

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oDn7wdWyHsZpqBYxQPecYY/projectcss
import sty from "./PlasmicAccordion.module.css"; // plasmic-import: V38XNak8TkBI/css

import ArrowRightSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ArrowRightSvgrepoCom1Svg"; // plasmic-import: CWlHCO3Mr0t0/icon

createPlasmicElementProxy;

export type PlasmicAccordion__VariantMembers = {};
export type PlasmicAccordion__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccordion__VariantsArgs;
export const PlasmicAccordion__VariantProps = new Array<VariantPropType>();

export type PlasmicAccordion__ArgsType = {
  children5?: React.ReactNode;
  children4?: React.ReactNode;
};
type ArgPropType = keyof PlasmicAccordion__ArgsType;
export const PlasmicAccordion__ArgProps = new Array<ArgPropType>(
  "children5",
  "children4"
);

export type PlasmicAccordion__OverridesType = {
  accordion?: Flex__<typeof AntdAccordion>;
};

export interface DefaultAccordionProps {
  children5?: React.ReactNode;
  children4?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicAccordion__RenderFunc(props: {
  variants: PlasmicAccordion__VariantsArgs;
  args: PlasmicAccordion__ArgsType;
  overrides: PlasmicAccordion__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (() => {
    const child$Props = {
      activeKey: generateStateValueProp($state, ["accordion", "activePanelId"]),
      bordered: true,
      className: classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.accordion
      ),
      items: (
        <React.Fragment>
          <AntdAccordionItem
            className={classNames("__wab_instance", sty.accordionItem__fPoZu)}
            id={1}
            label2={
              <div className={classNames(projectcss.all, sty.freeBox__sjqlO)}>
                <div className={classNames(projectcss.all, sty.freeBox__ueKz2)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3I1Zd
                    )}
                  >
                    {"First Item"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__zttom)}>
                  {renderPlasmicSlot({
                    defaultContents: (
                      <ArrowRightSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__mpqmH)}
                        role={"img"}
                      />
                    ),

                    value: args.children5
                  })}
                </div>
              </div>
            }
            showArrow={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kz2Nn
              )}
            >
              {"First Children"}
            </div>
          </AntdAccordionItem>
          <AntdAccordionItem
            className={classNames("__wab_instance", sty.accordionItem___7Way7)}
            id={2}
            label2={
              <div className={classNames(projectcss.all, sty.freeBox__d8FeE)}>
                <div className={classNames(projectcss.all, sty.freeBox__hxLwt)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rIdRj
                    )}
                  >
                    {"Second Item"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vdAjv)}>
                  {renderPlasmicSlot({
                    defaultContents: (
                      <ArrowRightSvgrepoCom1SvgIcon
                        className={classNames(projectcss.all, sty.svg__ppY7E)}
                        role={"img"}
                      />
                    ),

                    value: args.children4
                  })}
                </div>
              </div>
            }
            showArrow={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iw9Bg
              )}
            >
              {"Second Children"}
            </div>
          </AntdAccordionItem>
        </React.Fragment>
      ),
      onChange: generateStateOnChangePropForCodeComponents(
        $state,
        "activePanelId",
        ["accordion", "activePanelId"],
        AntdAccordion_Helpers
      )
    };
    initializeCodeComponentStates(
      $state,
      [
        {
          name: "activePanelId",
          plasmicStateName: "accordion.activePanelId"
        }
      ],
      [],
      AntdAccordion_Helpers ?? {},
      child$Props
    );

    return (
      <AntdAccordion
        data-plasmic-name={"accordion"}
        data-plasmic-override={overrides.accordion}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        {...child$Props}
      />
    );
  })() as React.ReactElement | null;
}

const PlasmicDescendants = {
  accordion: ["accordion"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  accordion: typeof AntdAccordion;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordion__VariantsArgs;
    args?: PlasmicAccordion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccordion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccordion__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccordion__ArgProps,
          internalVariantPropNames: PlasmicAccordion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccordion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "accordion") {
    func.displayName = "PlasmicAccordion";
  } else {
    func.displayName = `PlasmicAccordion.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordion = Object.assign(
  // Top-level PlasmicAccordion renders the root element
  makeNodeComponent("accordion"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicAccordion
    internalVariantProps: PlasmicAccordion__VariantProps,
    internalArgProps: PlasmicAccordion__ArgProps
  }
);

export default PlasmicAccordion;
/* prettier-ignore-end */
